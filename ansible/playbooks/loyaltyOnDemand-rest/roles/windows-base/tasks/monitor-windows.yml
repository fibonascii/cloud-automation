---
- name: Download all Windows Monitoring Installers from S3 Bucket to Instance
  win_shell: |
    $installerRepository = '{{cicd_pipeline_s3_bucket}}'

    $region = '{{build_region}}'
    $keyPrefix = 'build/deployment-artifacts/monitoring/'

    $localPath = 'C:/build/deployment-artifacts/monitoring'

    if (-Not (Test-Path -Path $localPath)){New-Item -Path $localPath -ItemType directory -Force | out-null}
    $artifacts = Get-S3Object -BucketName $installerRepository -KeyPrefix $keyPrefix -Region $region
    foreach($artifact in $artifacts) {$localFileName = $artifact.Key -replace $keyPrefix, ''
    if ($localFileName -ne '') {$localFilePath = Join-Path $localPath $localFileName
    Copy-S3Object -BucketName $installerRepository -Key $artifact.Key -LocalFile $localFilePath -Region $region}}
  retries: 3
  delay: 10

- name: Install Cloud Watch Agent for Windows
  win_shell: |
    $url = "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/AmazonCloudWatchAgent.zip"
    $zipfile = "C:/build\deployment-artifacts/monitoring/AmazonCloudWatchAgent.zip"

    $wc = New-Object System.Net.WebClient
    $wc.DownloadFile($url, $zipfile)
    $outpath = "C:/build/deployment-artifacts/monitoring/AmazonCloudWatchAgent"
    if (Test-Path -Path $outpath)
    {
    Remove-Item -Recurse -Force $outpath
    }
    Add-Type -assembly "system.io.compression.filesystem"
    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipfile, $outpath)
    Set-Location "C:/build/deployment-artifacts/monitoring/AmazonCloudWatchAgent"
    & "C:/build/deployment-artifacts/monitoring/AmazonCloudWatchAgent/install.ps1"

- name: Configure Cloud Watch Agent for Windows Monitoring
  win_shell: |
    & 'C:/Program Files/Amazon/AmazonCloudWatchAgent/amazon-cloudwatch-agent-ctl.ps1' -a fetch-config -m ec2 -c ssm:{{windows_cw_agent_config}} -s

- name: Get Cylance Protect Key from SSM
  set_fact:
    cylanceToken: "{{ lookup('aws_ssm', cylance_token_ssm_key, decrypt=True, region=build_region) }}"

- debug: var=cylance_zone_ssm_key
- pause: minutes=1

- name: Get Cylance Protect Zone from SSM
  set_fact:
    cylanceZone: "{{ lookup('aws_ssm', cylance_zone_ssm_key, decrypt=True, region=build_region) }}"

- name: Install Cylance Protect
  win_shell: |
    $file = Get-Item "./CylancePROTECT_x64.msi"
    $DataStamp = get-date -Format yyyyMMddTHHmmss
    $logFile = '{0}-{1}.log' -f $file.fullname,$DataStamp
    $MSIArguments = @(
        "/i"
        ('"{0}"' -f $file.fullname)
        '/qn PIDKEY={{cylanceToken}} VENUEZONE="{{cylanceZone}}" LAUNCHAPP=0'
        "/norestart"
        "/L*v"
        $logFile
        )
        Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
  args:
    chdir: c:\build\deployment-artifacts\monitoring

- name: Wait for Cylance Protect Install Completion
  win_shell: |
    $installSuccessful = $false
    while (-Not ($installSuccessful))
    {
    if (Test-Path 'C:/build/deployment-artifacts/monitoring/')
    {
    $logFileName = Get-ChildItem -Path 'C:/build/deployment-artifacts/monitoring/' -Include CylancePROTECT*.log -recurse | Select-String -pattern "Product: Cylance PROTECT -- Installation completed successfully." | group path | select name
    if ($logFileName)
    {
    $installSuccessful = $true
    Write-Host "Installation is successful."
    }
    else
    {
    Write-Host "Installation is still in Progress...Pausing for 1 minute."
    Start-Sleep -Milliseconds 60000;
    }
    }
    else
    {
    Write-Host "Installation is still in Progress...Pausing for 1 minute."
    Start-Sleep -Milliseconds 60000;
    }
    }


- name: Pause for all installations to complete
  pause: minutes=2

- name: Delete all Scripts, Installers, and Scheduled Tasks
  win_shell: |
    Remove-Item -Recurse -Force  c:\build\deployment-artifacts\monitoring

