---
- debug: var=application_version
- debug: var=application_release_type
- debug: var=application_release_type_sequence
- debug: var=application_s3_bucket
- debug: var=application_release_upload_key

- name: Identify the S3 Zip needed based on request filter
  debug: var=application_version

- name: Determine S3 Zip Name with Release Type
  set_fact:
    releaseZip: 'v{{application_version}}-{{application_release_type}}.{{application_release_type_sequence}}.zip'
  when: application_release_type is defined

- name: Determine S3 Zip Name without Release Type
  set_fact:
    releaseZip: 'v{{application_version}}.zip'
  when: application_release_type is not defined or application_release_type == ""

- name: Download Release Zip to Machine
  win_shell: |
    $cicdS3Bucket = '{{cicd_pipeline_s3_bucket}}'

    $region = '{{build_region}}'
    $keyPrefix = '{{application_release_upload_key}}'
    $fileName = '{{releaseZip}}'

    $localPath = 'C:/releases/loyalty-navigator/'
    $localFilePath = Join-Path $localPath $fileName

    $s3FilePath = "$($keyPrefix)$($fileName )"

    if (-Not (Test-Path -Path $localPath))
    {New-Item -Path $localPath -ItemType directory -Force | out-null}

    $releasePackage = Get-S3Object -BucketName $cicdS3Bucket -Key $s3FilePath -Region $region
    $localFileName = $artifact.Key -replace $keyPrefix, ''
    $localFilePath = Join-Path $localPath $fileName
    Copy-S3Object -BucketName $cicdS3Bucket -Key $releasePackage.Key -LocalFile $localFilePath -Region $region
  retries: 3
  delay: 10

- name: Create new directories for Application
  win_file: 
    path: C:\inetpub\wwwroot\loyalty-navigator
    state: directory

- name: Unzip the Application into new Directory
  win_unzip:
    src: 'c:\releases\loyalty-navigator\{{releaseZip}}'
    dest: c:\inetpub\wwwroot\loyalty-navigator

- name: Set Permissions on Directories
  win_acl:
    path: C:\inetpub\wwwroot\loyalty-navigator
    user: IIS_IUSRS
    rights: FullControl
    type: allow
    state: present
    inherit: ContainerInherit, ObjectInherit
    propagation: 'None'

- name: Remove Default IIS Site
  win_shell: |
    $webSiteName = "Default Web Site"
    $appPoolName = "DefaultAppPool"
    $iisPath = "IIS:Sites\$webSiteName"
    $webSite = get-website | where-object { $_.name -eq $webSiteName }
    if ($webSite)
    {
    Remove-WebSite -Name $webSiteName
    Remove-WebAppPool -Name $appPoolName
    }
    else
    {
    write-output "$(Get-Date -format T) - Already removed IIS Site: $webSiteName"
    }

- name: Create Application Pools and Websites in IIS
  win_shell: |
    Import-Module WebAdministration
    $iisAppPoolName = "Loyalty Navigator"
    $iisAppPoolDotNetVersion = "v4.0"
    $iisSiteName = "Loyalty Navigator"
    $directoryPath = "C:\inetpub\wwwroot\loyalty-navigator"

    #navigate to the app pools root
    cd IIS:\AppPools\

    #check if the app pool exists
    if (!(Test-Path $iisAppPoolName -pathType container))
    {
    #create the app pool
    $appPool = New-Item $iisAppPoolName
    $appPool | Set-ItemProperty -Name "managedRuntimeVersion" -Value $iisAppPoolDotNetVersion
    }

    #navigate to the sites root
    cd IIS:\Sites\

    #check if the site exists
    if (!(Test-Path $iisSiteName -pathType container))
    {
    #create the site
    $port = "80"
    $ip = "*"
    $bindings = @{protocol="http";bindingInformation=$ip + ":"+ $port + ":"}
    $iisApp = New-Item $iisSiteName  -physicalPath $directoryPath -bindings $bindings
    $iisApp | Set-ItemProperty -Name "applicationPool" -Value $iisAppPoolName
    }

- name: Start Websites in IIS
  win_shell: Start-WebSite 'Loyalty Navigator'



